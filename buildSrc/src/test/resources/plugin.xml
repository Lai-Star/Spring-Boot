<?xml version="1.0" encoding="UTF-8"?>

<!-- Generated by maven-plugin-tools 3.6 -->

<plugin>
  <name>Spring Boot Maven Plugin</name>
  <description></description>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-maven-plugin</artifactId>
  <version>2.2.0.GRADLE-SNAPSHOT</version>
  <goalPrefix>spring-boot</goalPrefix>
  <isolatedRealm>false</isolatedRealm>
  <inheritedByDefault>true</inheritedByDefault>
  <mojos>
    <mojo>
      <goal>build-info</goal>
      <description>Generate a {@code build-info.properties} file based on the content of the current
{@link MavenProject}.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>generate-resources</phase>
      <implementation>org.springframework.boot.maven.BuildInfoMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.4.0</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>additionalProperties</name>
          <type>java.util.Map</type>
          <required>false</required>
          <editable>true</editable>
          <description>Additional properties to store in the build-info.properties. Each entry is prefixed
by {@code build.} in the generated build-info.properties.</description>
        </parameter>
        <parameter>
          <name>outputFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The location of the generated build-info.properties.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven project.</description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven session.</description>
        </parameter>
        <parameter>
          <name>time</name>
          <type>java.lang.String</type>
          <since>2.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The value used for the {@code build.time} property in a form suitable for
{@link Instant#parse(CharSequence)}. Defaults to {@code session.request.startTime}.
To disable the {@code build.time} property entirely, use {@code &apos;off&apos;}.</description>
        </parameter>
      </parameters>
      <configuration>
        <outputFile implementation="java.io.File" default-value="${project.build.outputDirectory}/META-INF/build-info.properties"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.sonatype.plexus.build.incremental.BuildContext</role>
          <field-name>buildContext</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>help</goal>
      <description>Display help information on spring-boot-maven-plugin.&lt;br&gt;
Call &lt;code&gt;mvn spring-boot:help -Ddetail=true -Dgoal=&amp;lt;goal-name&amp;gt;&lt;/code&gt; to display parameter details.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.springframework.boot.maven.HelpMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>detail</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If &lt;code&gt;true&lt;/code&gt;, display all settable properties for each goal.</description>
        </parameter>
        <parameter>
          <name>goal</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the goal for which to show help. If unspecified, all goals will be displayed.</description>
        </parameter>
        <parameter>
          <name>indentSize</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The number of spaces per indentation level, should be positive.</description>
        </parameter>
        <parameter>
          <name>lineLength</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The maximum length of a display line, should be positive.</description>
        </parameter>
      </parameters>
      <configuration>
        <detail implementation="boolean" default-value="false">${detail}</detail>
        <goal implementation="java.lang.String">${goal}</goal>
        <indentSize implementation="int" default-value="2">${indentSize}</indentSize>
        <lineLength implementation="int" default-value="80">${lineLength}</lineLength>
      </configuration>
    </mojo>
    <mojo>
      <goal>repackage</goal>
      <description>Repackages existing JAR and WAR archives so that they can be executed from the command
line using {@literal java -jar}. With &lt;code&gt;layout=NONE&lt;/code&gt; can also be used simply
to package a JAR with nested dependencies (and no main class, so not executable).</description>
      <requiresDependencyResolution>compile+runtime</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>package</phase>
      <implementation>org.springframework.boot.maven.RepackageMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.0.0</since>
      <requiresDependencyCollection>compile+runtime</requiresDependencyCollection>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>attach</name>
          <type>boolean</type>
          <since>1.4.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Attach the repackaged archive to be installed and deployed.</description>
        </parameter>
        <parameter>
          <name>classifier</name>
          <type>java.lang.String</type>
          <since>1.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Classifier to add to the repackaged archive. If not given, the main artifact will
be replaced by the repackaged archive. If given, the classifier will also be used
to determine the source archive to repackage: if an artifact with that classifier
already exists, it will be used as source and replaced. If no such artifact exists,
the main artifact will be used as source and the repackaged archive will be
attached as a supplemental artifact with that classifier. Attaching the artifact
allows to deploy it alongside to the original one, see &lt;a href=
&quot;https://maven.apache.org/plugins/maven-deploy-plugin/examples/deploying-with-classifiers.html&quot;
&gt;the Maven documentation for more details&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>embeddedLaunchScript</name>
          <type>java.io.File</type>
          <since>1.3.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The embedded launch script to prepend to the front of the jar if it is fully
executable. If not specified the &apos;Spring Boot&apos; default script will be used.</description>
        </parameter>
        <parameter>
          <name>embeddedLaunchScriptProperties</name>
          <type>java.util.Properties</type>
          <since>1.3.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Properties that should be expanded in the embedded launch script.</description>
        </parameter>
        <parameter>
          <name>excludeDevtools</name>
          <type>boolean</type>
          <since>1.3.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Exclude Spring Boot devtools from the repackaged archive.</description>
        </parameter>
        <parameter>
          <name>excludeGroupIds</name>
          <type>java.lang.String</type>
          <since>1.1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of groupId names to exclude (exact match).</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.util.List</type>
          <since>1.1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Collection of artifact definitions to exclude. The {@link Exclude} element defines
a {@code groupId} and {@code artifactId} mandatory properties and an optional
{@code classifier} property.</description>
        </parameter>
        <parameter>
          <name>executable</name>
          <type>boolean</type>
          <since>1.3.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Make a fully executable jar for *nix machines by prepending a launch script to the
jar.
&lt;p&gt;
Currently, some tools do not accept this format so you may not always be able to
use this technique. For example, {@code jar -xf} may silently fail to extract a jar
or war that has been made fully-executable. It is recommended that you only enable
this option if you intend to execute it directly, rather than running it with
{@code java -jar} or deploying it to a servlet container.</description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <since>1.0.0</since>
          <required>false</required>
          <editable>false</editable>
          <description>Name of the generated archive.</description>
        </parameter>
        <parameter>
          <name>includeSystemScope</name>
          <type>boolean</type>
          <since>1.4.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Include system scoped dependencies.</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.util.List</type>
          <since>1.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Collection of artifact definitions to include. The {@link Include} element defines
a {@code groupId} and {@code artifactId} mandatory properties and an optional
{@code classifier} property.</description>
        </parameter>
        <parameter>
          <name>layout</name>
          <type>org.springframework.boot.maven.RepackageMojo$LayoutType</type>
          <since>1.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The type of archive (which corresponds to how the dependencies are laid out inside
it). Possible values are JAR, WAR, ZIP, DIR, NONE. Defaults to a guess based on the
archive type.</description>
        </parameter>
        <parameter>
          <name>layoutFactory</name>
          <type>org.springframework.boot.loader.tools.LayoutFactory</type>
          <since>1.5.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The layout factory that will be used to create the executable archive if no
explicit layout is set. Alternative layouts implementations can be provided by 3rd
parties.</description>
        </parameter>
        <parameter>
          <name>mainClass</name>
          <type>java.lang.String</type>
          <since>1.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the main class. If not specified the first compiled class found that
contains a &apos;main&apos; method will be used.</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <since>1.0.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>Directory containing the generated archive.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <since>1.0.0</since>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven project.</description>
        </parameter>
        <parameter>
          <name>requiresUnpack</name>
          <type>java.util.List</type>
          <since>1.1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A list of the libraries that must be unpacked from fat jars in order to run.
Specify each library as a {@code &lt;dependency&gt;} with a {@code &lt;groupId&gt;} and a
{@code &lt;artifactId&gt;} and they will be unpacked at runtime.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>1.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip the execution.</description>
        </parameter>
      </parameters>
      <configuration>
        <attach implementation="boolean" default-value="true"/>
        <excludeDevtools implementation="boolean" default-value="true">${spring-boot.repackage.excludeDevtools}</excludeDevtools>
        <excludeGroupIds implementation="java.lang.String" default-value="">${spring-boot.excludeGroupIds}</excludeGroupIds>
        <excludes implementation="java.util.List">${spring-boot.excludes}</excludes>
        <executable implementation="boolean" default-value="false"/>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <includeSystemScope implementation="boolean" default-value="false"/>
        <includes implementation="java.util.List">${spring-boot.includes}</includes>
        <layout implementation="org.springframework.boot.maven.RepackageMojo$LayoutType">${spring-boot.repackage.layout}</layout>
        <outputDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <skip implementation="boolean" default-value="false">${spring-boot.repackage.skip}</skip>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>run</goal>
      <description>Run an executable archive application.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>validate</phase>
      <executePhase>test-compile</executePhase>
      <implementation>org.springframework.boot.maven.RunMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.0.0</since>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>addResources</name>
          <type>boolean</type>
          <since>1.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Add maven resources to the classpath directly, this allows live in-place editing of
resources. Duplicate resources are removed from {@code target/classes} to prevent
them to appear twice if {@code ClassLoader.getResources()} is called. Please
consider adding {@code spring-boot-devtools} to your project instead as it provides
this feature and many more.</description>
        </parameter>
        <parameter>
          <name>agent</name>
          <type>java.io.File[]</type>
          <since>1.0.0</since>
          <deprecated>since 2.2.0 in favor of {@code agents}</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Path to agent jar. NOTE: a forked process is required to use this feature.</description>
        </parameter>
        <parameter>
          <name>agents</name>
          <type>java.io.File[]</type>
          <since>2.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Path to agent jars. NOTE: a forked process is required to use this feature.</description>
        </parameter>
        <parameter>
          <name>arguments</name>
          <type>java.lang.String[]</type>
          <since>1.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Arguments that should be passed to the application. On command line use commas to
separate multiple arguments.</description>
        </parameter>
        <parameter>
          <name>classesDirectory</name>
          <type>java.io.File</type>
          <since>1.0.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>Directory containing the classes and resource files that should be packaged into
the archive.</description>
        </parameter>
        <parameter>
          <name>environmentVariables</name>
          <type>java.util.Map</type>
          <since>2.1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of Environment variables that should be associated with the forked process
used to run the application. NOTE: a forked process is required to use this
feature.</description>
        </parameter>
        <parameter>
          <name>excludeGroupIds</name>
          <type>java.lang.String</type>
          <since>1.1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of groupId names to exclude (exact match).</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.util.List</type>
          <since>1.1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Collection of artifact definitions to exclude. The {@link Exclude} element defines
a {@code groupId} and {@code artifactId} mandatory properties and an optional
{@code classifier} property.</description>
        </parameter>
        <parameter>
          <name>folders</name>
          <type>java.lang.String[]</type>
          <since>1.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Additional folders besides the classes directory that should be added to the
classpath.</description>
        </parameter>
        <parameter>
          <name>fork</name>
          <type>boolean</type>
          <since>1.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to indicate if the run processes should be forked. Disabling forking will
disable some features such as an agent, custom JVM arguments, devtools or
specifying the working directory to use.</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.util.List</type>
          <since>1.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Collection of artifact definitions to include. The {@link Include} element defines
a {@code groupId} and {@code artifactId} mandatory properties and an optional
{@code classifier} property.</description>
        </parameter>
        <parameter>
          <name>jvmArguments</name>
          <type>java.lang.String</type>
          <since>1.1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>JVM arguments that should be associated with the forked process used to run the
application. On command line, make sure to wrap multiple values between quotes.
NOTE: a forked process is required to use this feature.</description>
        </parameter>
        <parameter>
          <name>mainClass</name>
          <type>java.lang.String</type>
          <since>1.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the main class. If not specified the first compiled class found that
contains a &apos;main&apos; method will be used.</description>
        </parameter>
        <parameter>
          <name>noverify</name>
          <type>boolean</type>
          <since>1.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to say that the agent requires -noverify.</description>
        </parameter>
        <parameter>
          <name>optimizedLaunch</name>
          <type>boolean</type>
          <since>2.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether the JVM&apos;s launch should be optimized.</description>
        </parameter>
        <parameter>
          <name>profiles</name>
          <type>java.lang.String[]</type>
          <since>1.3.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The spring profiles to activate. Convenience shortcut of specifying the
&apos;spring.profiles.active&apos; argument. On command line use commas to separate multiple
profiles.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <since>1.0.0</since>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven project.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>1.3.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip the execution.</description>
        </parameter>
        <parameter>
          <name>systemPropertyVariables</name>
          <type>java.util.Map</type>
          <since>2.1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of JVM system properties to pass to the process. NOTE: a forked process is
required to use this feature.</description>
        </parameter>
        <parameter>
          <name>useTestClasspath</name>
          <type>java.lang.Boolean</type>
          <since>1.3.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to include the test classpath when running.</description>
        </parameter>
        <parameter>
          <name>workingDirectory</name>
          <type>java.io.File</type>
          <since>1.5.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Current working directory to use for the application. If not specified, basedir
will be used. NOTE: a forked process is required to use this feature.</description>
        </parameter>
      </parameters>
      <configuration>
        <addResources implementation="boolean" default-value="false">${spring-boot.run.addResources}</addResources>
        <agent implementation="java.io.File[]">${spring-boot.run.agent}</agent>
        <agents implementation="java.io.File[]">${spring-boot.run.agents}</agents>
        <arguments implementation="java.lang.String[]">${spring-boot.run.arguments}</arguments>
        <classesDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <excludeGroupIds implementation="java.lang.String" default-value="">${spring-boot.excludeGroupIds}</excludeGroupIds>
        <excludes implementation="java.util.List">${spring-boot.excludes}</excludes>
        <folders implementation="java.lang.String[]">${spring-boot.run.folders}</folders>
        <fork implementation="boolean" default-value="true">${spring-boot.run.fork}</fork>
        <includes implementation="java.util.List">${spring-boot.includes}</includes>
        <jvmArguments implementation="java.lang.String">${spring-boot.run.jvmArguments}</jvmArguments>
        <mainClass implementation="java.lang.String">${spring-boot.run.main-class}</mainClass>
        <noverify implementation="boolean">${spring-boot.run.noverify}</noverify>
        <optimizedLaunch implementation="boolean" default-value="true">${spring-boot.run.optimizedLaunch}</optimizedLaunch>
        <profiles implementation="java.lang.String[]">${spring-boot.run.profiles}</profiles>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <skip implementation="boolean" default-value="false">${spring-boot.run.skip}</skip>
        <useTestClasspath implementation="java.lang.Boolean" default-value="false">${spring-boot.run.useTestClasspath}</useTestClasspath>
        <workingDirectory implementation="java.io.File">${spring-boot.run.workingDirectory}</workingDirectory>
      </configuration>
    </mojo>
    <mojo>
      <goal>start</goal>
      <description>Start a spring application. Contrary to the {@code run} goal, this does not block and
allows other goal to operate on the application. This goal is typically used in
integration test scenario where the application is started before a test suite and
stopped after.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>pre-integration-test</phase>
      <implementation>org.springframework.boot.maven.StartMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.3.0</since>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>addResources</name>
          <type>boolean</type>
          <since>1.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Add maven resources to the classpath directly, this allows live in-place editing of
resources. Duplicate resources are removed from {@code target/classes} to prevent
them to appear twice if {@code ClassLoader.getResources()} is called. Please
consider adding {@code spring-boot-devtools} to your project instead as it provides
this feature and many more.</description>
        </parameter>
        <parameter>
          <name>agent</name>
          <type>java.io.File[]</type>
          <since>1.0.0</since>
          <deprecated>since 2.2.0 in favor of {@code agents}</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Path to agent jar. NOTE: a forked process is required to use this feature.</description>
        </parameter>
        <parameter>
          <name>agents</name>
          <type>java.io.File[]</type>
          <since>2.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Path to agent jars. NOTE: a forked process is required to use this feature.</description>
        </parameter>
        <parameter>
          <name>arguments</name>
          <type>java.lang.String[]</type>
          <since>1.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Arguments that should be passed to the application. On command line use commas to
separate multiple arguments.</description>
        </parameter>
        <parameter>
          <name>classesDirectory</name>
          <type>java.io.File</type>
          <since>1.0.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>Directory containing the classes and resource files that should be packaged into
the archive.</description>
        </parameter>
        <parameter>
          <name>environmentVariables</name>
          <type>java.util.Map</type>
          <since>2.1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of Environment variables that should be associated with the forked process
used to run the application. NOTE: a forked process is required to use this
feature.</description>
        </parameter>
        <parameter>
          <name>excludeGroupIds</name>
          <type>java.lang.String</type>
          <since>1.1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of groupId names to exclude (exact match).</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.util.List</type>
          <since>1.1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Collection of artifact definitions to exclude. The {@link Exclude} element defines
a {@code groupId} and {@code artifactId} mandatory properties and an optional
{@code classifier} property.</description>
        </parameter>
        <parameter>
          <name>folders</name>
          <type>java.lang.String[]</type>
          <since>1.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Additional folders besides the classes directory that should be added to the
classpath.</description>
        </parameter>
        <parameter>
          <name>fork</name>
          <type>boolean</type>
          <since>1.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to indicate if the run processes should be forked. Disabling forking will
disable some features such as an agent, custom JVM arguments, devtools or
specifying the working directory to use.</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.util.List</type>
          <since>1.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Collection of artifact definitions to include. The {@link Include} element defines
a {@code groupId} and {@code artifactId} mandatory properties and an optional
{@code classifier} property.</description>
        </parameter>
        <parameter>
          <name>jmxName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The JMX name of the automatically deployed MBean managing the lifecycle of the
spring application.</description>
        </parameter>
        <parameter>
          <name>jmxPort</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The port to use to expose the platform MBeanServer if the application is forked.</description>
        </parameter>
        <parameter>
          <name>jvmArguments</name>
          <type>java.lang.String</type>
          <since>1.1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>JVM arguments that should be associated with the forked process used to run the
application. On command line, make sure to wrap multiple values between quotes.
NOTE: a forked process is required to use this feature.</description>
        </parameter>
        <parameter>
          <name>mainClass</name>
          <type>java.lang.String</type>
          <since>1.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the main class. If not specified the first compiled class found that
contains a &apos;main&apos; method will be used.</description>
        </parameter>
        <parameter>
          <name>maxAttempts</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The maximum number of attempts to check if the spring application is ready.
Combined with the &quot;wait&quot; argument, this gives a global timeout value (30 sec by
default)</description>
        </parameter>
        <parameter>
          <name>noverify</name>
          <type>boolean</type>
          <since>1.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to say that the agent requires -noverify.</description>
        </parameter>
        <parameter>
          <name>profiles</name>
          <type>java.lang.String[]</type>
          <since>1.3.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The spring profiles to activate. Convenience shortcut of specifying the
&apos;spring.profiles.active&apos; argument. On command line use commas to separate multiple
profiles.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <since>1.0.0</since>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven project.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>1.3.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip the execution.</description>
        </parameter>
        <parameter>
          <name>systemPropertyVariables</name>
          <type>java.util.Map</type>
          <since>2.1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of JVM system properties to pass to the process. NOTE: a forked process is
required to use this feature.</description>
        </parameter>
        <parameter>
          <name>useTestClasspath</name>
          <type>java.lang.Boolean</type>
          <since>1.3.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to include the test classpath when running.</description>
        </parameter>
        <parameter>
          <name>wait</name>
          <type>long</type>
          <required>false</required>
          <editable>true</editable>
          <description>The number of milliseconds to wait between each attempt to check if the spring
application is ready.</description>
        </parameter>
        <parameter>
          <name>workingDirectory</name>
          <type>java.io.File</type>
          <since>1.5.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Current working directory to use for the application. If not specified, basedir
will be used. NOTE: a forked process is required to use this feature.</description>
        </parameter>
      </parameters>
      <configuration>
        <addResources implementation="boolean" default-value="false">${spring-boot.run.addResources}</addResources>
        <agent implementation="java.io.File[]">${spring-boot.run.agent}</agent>
        <agents implementation="java.io.File[]">${spring-boot.run.agents}</agents>
        <arguments implementation="java.lang.String[]">${spring-boot.run.arguments}</arguments>
        <classesDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <excludeGroupIds implementation="java.lang.String" default-value="">${spring-boot.excludeGroupIds}</excludeGroupIds>
        <excludes implementation="java.util.List">${spring-boot.excludes}</excludes>
        <folders implementation="java.lang.String[]">${spring-boot.run.folders}</folders>
        <fork implementation="boolean" default-value="true">${spring-boot.run.fork}</fork>
        <includes implementation="java.util.List">${spring-boot.includes}</includes>
        <jvmArguments implementation="java.lang.String">${spring-boot.run.jvmArguments}</jvmArguments>
        <mainClass implementation="java.lang.String">${spring-boot.run.main-class}</mainClass>
        <noverify implementation="boolean">${spring-boot.run.noverify}</noverify>
        <profiles implementation="java.lang.String[]">${spring-boot.run.profiles}</profiles>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <skip implementation="boolean" default-value="false">${spring-boot.run.skip}</skip>
        <useTestClasspath implementation="java.lang.Boolean" default-value="false">${spring-boot.run.useTestClasspath}</useTestClasspath>
        <workingDirectory implementation="java.io.File">${spring-boot.run.workingDirectory}</workingDirectory>
      </configuration>
    </mojo>
    <mojo>
      <goal>stop</goal>
      <description>Stop a spring application that has been started by the &quot;start&quot; goal. Typically invoked
once a test suite has completed.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>post-integration-test</phase>
      <implementation>org.springframework.boot.maven.StopMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.3.0</since>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>fork</name>
          <type>java.lang.Boolean</type>
          <since>1.3.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to indicate if process to stop was forked. By default, the value is inherited
from the {@link MavenProject}. If it is set, it must match the value used to
{@link StartMojo start} the process.</description>
        </parameter>
        <parameter>
          <name>jmxName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The JMX name of the automatically deployed MBean managing the lifecycle of the
application.</description>
        </parameter>
        <parameter>
          <name>jmxPort</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The port to use to look up the platform MBeanServer if the application has been
forked.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <since>1.4.1</since>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven project.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>1.3.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip the execution.</description>
        </parameter>
      </parameters>
      <configuration>
        <fork implementation="java.lang.Boolean">${spring-boot.stop.fork}</fork>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <skip implementation="boolean" default-value="false">${spring-boot.stop.skip}</skip>
      </configuration>
    </mojo>
  </mojos>
  <dependencies/>
</plugin>
